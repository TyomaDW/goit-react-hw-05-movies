{"version":3,"file":"static/js/836.50cf6cb4.chunk.js","mappings":"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","sources":["components/MovieDetailsPage/MoviesDetailsPage.jsx","services/apiService.js"],"sourcesContent":["import { useParams, useNavigate, NavLink, Outlet } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { getMovieById } from '../../services/apiService';\n\nconst MovieItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 20px auto 0;\n  max-width: 800px;\n`;\n\nconst DetailsList = styled.ul`\n  display: flex;\n  font-size: 20px;\n  line-height: 1.23;\n  padding: 20px;\n  justify-content: center;\n  color: black;\n  li + li {\n    margin-left: 20px;\n  }\n  a:hover {\n    color: blue;\n  }\n`;\n\nconst Button = styled.button`\n  align-self: flex-start;\n  border-radius: 0.5rem;\n  height: 34px;\n  border: 1px solid grey;\n  background-color: grey;\n  cursor: pointer;\n  color: white;\n  font-weight: 700;\n  padding: 0.5rem;\n\n  :hover {\n    background-color: white;\n    color: grey;\n  }\n`;\n\nexport default function MoviesDetailsPage() {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    getMovieById(movieId)\n      .then(setMovie)\n      .catch(err => {\n        console.log(err);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <Button onClick={() => navigate(-1)}>go back</Button>\n      {movie && (\n        <MovieItem>\n          <img width={200} src={movie.poster_path} alt=\"poster\" />\n          <h1>\n            {movie.title}({movie.release_year})\n          </h1>\n          <p>{`User Score: ${movie.vote_average}`}</p>\n          <h2>Overview</h2>\n          <p>{movie.overview}</p>\n          <h2>Genres</h2>\n          <p>{movie.genres.join(' ')}</p>\n          <h3>Additional information</h3>\n          <DetailsList>\n            <li>\n              <NavLink to={`/movies/${movieId}/cast`}>Cast</NavLink>\n            </li>\n            <li>\n              <NavLink to={`/movies/${movieId}/reviews`}>Reviews</NavLink>\n            </li>\n          </DetailsList>\n          <Outlet context={movieId} />\n        </MovieItem>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'aa799e6d0297de166f5b00a47e312b46';\n\nconst IMG_PLACEHOLDER = 'https://critics.io/img/movies/poster-placeholder.png';\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\nexport const searchMovie = async query => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`;\n  const result = await axios.get(url);\n  return result.data.results;\n};\n\nexport const getMovieById = async id => {\n  const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  const result = fixMovie(data);\n  result.genres = result.genres.map(genre => genre.name);\n  return result;\n};\n\nexport const getMovieCreditsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const {\n    data: { cast },\n  } = await axios.get(url);\n  return cast.map(fixCast);\n};\n\nexport const getMovieReviewsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const {\n    data: { results },\n  } = await axios.get(url);\n  const reviews = results.map(({ author, content }) => {\n    return { author, content };\n  });\n  return reviews;\n};\n\nconst fixMovie = movie => {\n  let result = Object.assign({}, movie);\n  if (result.poster_path)\n    result.poster_path = 'https://image.tmdb.org/t/p/w500' + result.poster_path;\n  else result.poster_path = IMG_PLACEHOLDER;\n  result.release_year = !result.release_date\n    ? 'Unknown'\n    : result.release_date.slice(0, 4);\n  result.vote_average = `${result.vote_average * 10}%`;\n  return result;\n};\n\nconst fixCast = ({ original_name, profile_path, character }) => {\n  const newActor = { name: original_name, character };\n  newActor.path = profile_path\n    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n    : IMG_PLACEHOLDER;\n  return newActor;\n};\n"],"names":["MovieItem","styled","DetailsList","Button","MoviesDetailsPage","movieId","useParams","useState","movie","setMovie","navigate","useNavigate","useEffect","getMovieById","then","catch","err","console","log","onClick","width","src","poster_path","alt","title","release_year","vote_average","overview","genres","join","to","context","BASE_URL","API_KEY","IMG_PLACEHOLDER","getTrending","url","axios","response","data","searchMovie","query","result","results","id","fixMovie","map","genre","name","getMovieCreditsById","cast","fixCast","getMovieReviewsById","reviews","author","content","Object","assign","release_date","slice","original_name","profile_path","newActor","character","path"],"sourceRoot":""}