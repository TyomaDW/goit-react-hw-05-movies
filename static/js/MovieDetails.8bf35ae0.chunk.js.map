{"version":3,"file":"static/js/MovieDetails.8bf35ae0.chunk.js","mappings":"sSAAMA,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,aAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACeC,EADf,MAKxB,SAASY,EAAkBC,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,kBAC0Ba,EAD1B,+CAKxB,SAASC,EAAmBC,GACjC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,oBACQf,EADR,qBAKxB,SAASgB,EAAmBD,GACjC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACgBf,EADhB,oBAKxB,SAASiB,EAAmBF,GACjC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACgBf,EADhB,uB,2HClC/B,EAA8B,kCAA9B,EAAuE,2B,SCOjEkB,GAAOC,EAAAA,EAAAA,OAAK,kBAChB,gCAEIC,GAAUD,EAAAA,EAAAA,OAAK,kBACnB,gCAGa,SAASE,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAsBC,EAAAA,EAAAA,MAAdzB,EAAR,EAAQA,IAAK0B,EAAb,EAAaA,KAMb,OAJAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAA6BR,GAASS,MAAK,SAAAN,GAAK,OAAIC,EAASD,QAC5D,CAACH,KAGF,8BACGG,IACC,iCACE,0BACGA,EAAMO,MADT,IACiBP,EAAMQ,aADvB,QAGA,iBAAKC,UAAWC,EAAhB,WACE,gBACEC,IACEX,EAAMY,YAAN,yCACsCZ,EAAMY,aACxCC,EAENC,IAAKd,EAAMO,OAASP,EAAMZ,QAE5B,iBAAKqB,UAAWC,EAAhB,WACE,sCACA,uBAAIV,EAAMe,YACV,qCACA,0BAAOf,EAAMgB,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAM9B,QAAM+B,KAAK,QAClD,wCACa,0BAAOnB,EAAMoB,yBAK9B,oDACA,2BACE,yBACE,SAAC,KAAD,CAASC,GAAE,UAAK5C,EAAL,SAAX,qBAEF,yBACE,SAAC,KAAD,CAAS4C,GAAE,UAAK5C,EAAL,YAAX,2BAIJ,mBACA,UAAC,EAAA6C,SAAD,YACE,SAAC,KAAD,CAAOnB,KAAI,UAAKA,EAAL,SAAX,SACGH,IAAS,SAACP,EAAD,CAAMI,QAASA,OAG3B,SAAC,KAAD,CAAOM,KAAI,UAAKA,EAAL,YAAX,UACE,SAACR,EAAD,CAASE,QAASA,gB","sources":["services/moviesApi.js","webpack://react-homework-template/./src/views/MovieDetails.module.css?c107","views/MovieDetails.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'aa799e6d0297de166f5b00a47e312b46';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('No found'));\n}\n\nexport function fetchTreading() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY} `\n  );\n}\n\nexport function fetchSearchMovies(name) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${name}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMoviesDetails(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US `\n  );\n}\n\nexport function fetchMoviesCredits(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMoviesReviews(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US `\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"MovieDetails_description__WYtxY\",\"desc\":\"MovieDetails_desc__0wr74\"};","import { useState, useEffect, lazy, Suspense } from 'react';\nimport { NavLink, Route, useParams, useRouteMatch } from 'react-router-dom';\n\nimport * as moviesApi from '../services/moviesApi';\n\nimport imagePlaseholder from '../images/imagePlaceholder.png';\nimport s from './MovieDetails.module.css';\n\nconst Cast = lazy(() =>\n  import('../components/Cast/Cast' /*webpackChunkName: \"Cast\" */)\n);\nconst Reviews = lazy(() =>\n  import('../components/Reviews/Reviews' /*webpackChunkName: \"Reviews\" */)\n);\n\nexport default function MovieDetails() {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const { url, path } = useRouteMatch();\n\n  useEffect(() => {\n    moviesApi.fetchMoviesDetails(movieId).then(movie => setMovie(movie));\n  }, [movieId]);\n\n  return (\n    <>\n      {movie && (\n        <>\n          <h1>\n            {movie.title}({movie.release_date})\n          </h1>\n          <div className={s.description}>\n            <img\n              src={\n                movie.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                  : imagePlaseholder\n              }\n              alt={movie.title || movie.name}\n            ></img>\n            <div className={s.desc}>\n              <p>Overview:</p>\n              <p>{movie.overview}</p>\n              <p>Genres :</p>\n              <span>{movie.genres.map(genre => genre.name).join('/')}</span>\n              <p>\n                Use score: <span>{movie.vote_average}</span>\n              </p>\n            </div>\n          </div>\n\n          <h2>Additional information</h2>\n          <ul>\n            <li>\n              <NavLink to={`${url}/cast`}>Cast</NavLink>\n            </li>\n            <li>\n              <NavLink to={`${url}/reviews`}>Reviews</NavLink>\n            </li>\n          </ul>\n\n          <hr />\n          <Suspense>\n            <Route path={`${path}/cast`}>\n              {movie && <Cast movieId={movieId} />}\n            </Route>\n\n            <Route path={`${path}/reviews`}>\n              <Reviews movieId={movieId} />\n            </Route>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTreading","fetchSearchMovies","name","fetchMoviesDetails","id","fetchMoviesCredits","fetchMoviesReviews","Cast","lazy","Reviews","MovieDetails","movieId","useParams","useState","movie","setMovie","useRouteMatch","path","useEffect","moviesApi","then","title","release_date","className","s","src","poster_path","imagePlaseholder","alt","overview","genres","map","genre","join","vote_average","to","Suspense"],"sourceRoot":""}