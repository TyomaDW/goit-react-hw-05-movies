{"version":3,"file":"static/js/184.c8d3e823.chunk.js","mappings":"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","sources":["components/MoviesPage/MoviesPage.jsx","services/apiService.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { NavLink, useNavigate, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport styled from 'styled-components';\n\nimport { searchMovie } from '../../services/apiService';\n\nconst MoviesList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin: 20px auto 0;\n  max-width: 300px;\n`;\n\nconst Input = styled.input`\n  border-radius: 0 0.5rem 0.5rem 0;\n  height: 30px;\n  border: 1px solid grey;\n  outline: none;\n  :hover {\n    border: 1px solid blue;\n  }\n`;\n\nconst Button = styled.button`\n  border-radius: 0.5rem 0 0 0.5rem;\n  height: 34px;\n  border: 1px solid grey;\n  background-color: grey;\n  cursor: pointer;\n  color: white;\n  font-weight: 500;\n  :hover {\n    background-color: white;\n    color: grey;\n  }\n`;\n\nexport default function MoviesPage() {\n  const [filter, setFilter] = useState('');\n  const [movies, setMovies] = useState(null);\n  const navigate = useNavigate();\n  const { search } = useLocation();\n\n  const query = new URLSearchParams(search)?.get('query');\n\n  const handleInputChange = event => {\n    const value = event.target.value.toLowerCase();\n    setFilter(value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (filter.trim() === '') {\n      return toast.error('Empty input');\n    }\n    searchMovie(filter)\n      .then(movies => {\n        setMovies(movies);\n        navigate(`/movies?query=${filter}`);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    setFilter('');\n  };\n\n  useEffect(() => {\n    if (filter || filter === query) {\n      return;\n    }\n    if (!query) {\n      setMovies(null);\n      return;\n    }\n    searchMovie(query)\n      .then(movies => {\n        setMovies(movies);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    setFilter('');\n  }, [query, filter]);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <Button type=\"submit\">Search</Button>\n        <Input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          onChange={handleInputChange}\n        />\n      </form>\n      {movies?.length > 0 && (\n        <MoviesList>\n          {movies.map(({ title, id }) => (\n            <li key={id}>\n              <NavLink to={`/movies/${id}`}>{title}</NavLink>\n            </li>\n          ))}\n        </MoviesList>\n      )}\n      {!movies || (movies?.length === 0 && <p>No movies found</p>)}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'aa799e6d0297de166f5b00a47e312b46';\n\nconst IMG_PLACEHOLDER = 'https://critics.io/img/movies/poster-placeholder.png';\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\nexport const searchMovie = async query => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`;\n  const result = await axios.get(url);\n  return result.data.results;\n};\n\nexport const getMovieById = async id => {\n  const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  const result = fixMovie(data);\n  result.genres = result.genres.map(genre => genre.name);\n  return result;\n};\n\nexport const getMovieCreditsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const {\n    data: { cast },\n  } = await axios.get(url);\n  return cast.map(fixCast);\n};\n\nexport const getMovieReviewsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const {\n    data: { results },\n  } = await axios.get(url);\n  const reviews = results.map(({ author, content }) => {\n    return { author, content };\n  });\n  return reviews;\n};\n\nconst fixMovie = movie => {\n  let result = Object.assign({}, movie);\n  if (result.poster_path)\n    result.poster_path = 'https://image.tmdb.org/t/p/w500' + result.poster_path;\n  else result.poster_path = IMG_PLACEHOLDER;\n  result.release_year = !result.release_date\n    ? 'Unknown'\n    : result.release_date.slice(0, 4);\n  result.vote_average = `${result.vote_average * 10}%`;\n  return result;\n};\n\nconst fixCast = ({ original_name, profile_path, character }) => {\n  const newActor = { name: original_name, character };\n  newActor.path = profile_path\n    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n    : IMG_PLACEHOLDER;\n  return newActor;\n};\n"],"names":["MoviesList","styled","Input","Button","MoviesPage","useState","filter","setFilter","movies","setMovies","navigate","useNavigate","search","useLocation","query","URLSearchParams","get","useEffect","searchMovie","then","catch","err","console","log","onSubmit","event","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","onChange","value","target","toLowerCase","length","map","title","id","to","BASE_URL","API_KEY","IMG_PLACEHOLDER","getTrending","url","axios","response","data","result","results","getMovieById","fixMovie","genres","genre","name","getMovieCreditsById","cast","fixCast","getMovieReviewsById","reviews","author","content","movie","Object","assign","poster_path","release_year","release_date","slice","vote_average","original_name","profile_path","newActor","character","path"],"sourceRoot":""}