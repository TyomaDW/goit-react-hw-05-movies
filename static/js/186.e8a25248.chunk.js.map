{"version":3,"file":"static/js/186.e8a25248.chunk.js","mappings":"+PAMMA,EAAaC,EAAAA,GAAAA,GAAH,gDAIVC,EAASD,EAAAA,GAAAA,KAAH,sEAKG,SAASE,IACtB,IAAMC,GAAUC,EAAAA,EAAAA,MAChB,GAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAUA,OATAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBN,GACjBO,MAAK,SAAAJ,GACJC,EAAWD,MAEZK,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,CAACT,KAEF,iCACU,OAAPG,QAAO,IAAPA,OAAA,EAAAA,EAASS,QAAS,IACjB,wBACGT,EAAQU,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACX,UAACnB,EAAD,YACE,0BACE,SAACE,EAAD,sBACCgB,MAEH,uBAAIC,MALWD,SAUrBX,GAAgC,KAAb,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASS,UAAgB,iD,0MCxCvCI,EAAW,+BACXC,EAAU,mCAEVC,EAAkB,uDAEXC,EAAW,mCAAG,6FACnBC,EADmB,UACVJ,EADU,uCAC6BC,GAD7B,SAEFI,IAAAA,IAAUD,GAFR,cAEnBE,EAFmB,yBAGlBA,EAASC,MAHS,2CAAH,qDAMXC,EAAW,mCAAG,WAAMC,GAAN,gFACnBL,EADmB,UACVJ,EADU,iCACuBC,EADvB,kBACwCQ,EADxC,wCAEJJ,IAAAA,IAAUD,GAFN,cAEnBM,EAFmB,yBAGlBA,EAAOH,KAAKI,SAHM,2CAAH,sDAMXC,EAAY,mCAAG,WAAMC,GAAN,oFACpBT,EADoB,UACXJ,EADW,kBACOa,EADP,oBACqBZ,GADrB,SAEHI,IAAAA,IAAUD,GAFP,uBAElBG,EAFkB,EAElBA,MACFG,EAASI,EAASP,IACjBQ,OAASL,EAAOK,OAAOlB,KAAI,SAAAmB,GAAK,OAAIA,EAAMC,QAJvB,kBAKnBP,GALmB,2CAAH,sDAQZQ,EAAmB,mCAAG,WAAML,GAAN,kFAC3BT,EAD2B,UAClBJ,EADkB,kBACAa,EADA,4BACsBZ,GADtB,SAIvBI,IAAAA,IAAUD,GAJa,uBAGvBe,EAHuB,EAG/BZ,KAAQY,KAHuB,kBAK1BA,EAAKtB,IAAIuB,IALiB,2CAAH,sDAQnB9B,EAAmB,mCAAG,WAAMuB,GAAN,oFAC3BT,EAD2B,UAClBJ,EADkB,kBACAa,EADA,4BACsBZ,GADtB,SAIvBI,IAAAA,IAAUD,GAJa,uBAGvBO,EAHuB,EAG/BJ,KAAQI,QAEJxB,EAAUwB,EAAQd,KAAI,YAC1B,MAAO,CAAEC,OAD0C,EAAtBA,OACZC,QADkC,EAAdA,YALN,kBAQ1BZ,GAR0B,2CAAH,sDAW1B2B,EAAW,SAAAO,GACf,IAAIX,EAASY,OAAOC,OAAO,GAAIF,GAQ/B,OAPIX,EAAOc,YACTd,EAAOc,YAAc,kCAAoCd,EAAOc,YAC7Dd,EAAOc,YAActB,EAC1BQ,EAAOe,aAAgBf,EAAOgB,aAE1BhB,EAAOgB,aAAaC,MAAM,EAAG,GAD7B,UAEJjB,EAAOkB,aAAP,UAA+C,GAAtBlB,EAAOkB,aAAhC,KACOlB,GAGHU,EAAU,SAAC,GAAgD,IAA9CS,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,aAC1BC,EAAW,CAAEd,KAAMY,EAAeG,UADsB,EAAhBA,WAK9C,OAHAD,EAASE,KAAOH,EACZ,kCAAoCA,EACpC5B,EACG6B","sources":["components/Reviews/Reviews.jsx","services/apiService.js"],"sourcesContent":["import { useOutletContext } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { getMovieReviewsById } from '../../services/apiService';\n\nconst ReviewItem = styled.li`\n  margin-bottom: 50px;\n`;\n\nconst Author = styled.span`\n  font-weight: 700;\n  margin-right: 0.5rem;\n`;\n\nexport default function Reviews() {\n  const movieId = useOutletContext();\n  const [reviews, setReviews] = useState(null);\n  useEffect(() => {\n    getMovieReviewsById(movieId)\n      .then(reviews => {\n        setReviews(reviews);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, [movieId]);\n  return (\n    <>\n      {reviews?.length > 0 && (\n        <ul>\n          {reviews.map(({ author, content }) => (\n            <ReviewItem key={author}>\n              <p>\n                <Author>Author:</Author>\n                {author}\n              </p>\n              <p>{content}</p>\n            </ReviewItem>\n          ))}\n        </ul>\n      )}\n      {!reviews || (reviews?.length === 0 && <p>No reviews found</p>)}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'aa799e6d0297de166f5b00a47e312b46';\n\nconst IMG_PLACEHOLDER = 'https://critics.io/img/movies/poster-placeholder.png';\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\nexport const searchMovie = async query => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`;\n  const result = await axios.get(url);\n  return result.data.results;\n};\n\nexport const getMovieById = async id => {\n  const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  const result = fixMovie(data);\n  result.genres = result.genres.map(genre => genre.name);\n  return result;\n};\n\nexport const getMovieCreditsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const {\n    data: { cast },\n  } = await axios.get(url);\n  return cast.map(fixCast);\n};\n\nexport const getMovieReviewsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const {\n    data: { results },\n  } = await axios.get(url);\n  const reviews = results.map(({ author, content }) => {\n    return { author, content };\n  });\n  return reviews;\n};\n\nconst fixMovie = movie => {\n  let result = Object.assign({}, movie);\n  if (result.poster_path)\n    result.poster_path = 'https://image.tmdb.org/t/p/w500' + result.poster_path;\n  else result.poster_path = IMG_PLACEHOLDER;\n  result.release_year = !result.release_date\n    ? 'Unknown'\n    : result.release_date.slice(0, 4);\n  result.vote_average = `${result.vote_average * 10}%`;\n  return result;\n};\n\nconst fixCast = ({ original_name, profile_path, character }) => {\n  const newActor = { name: original_name, character };\n  newActor.path = profile_path\n    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n    : IMG_PLACEHOLDER;\n  return newActor;\n};\n"],"names":["ReviewItem","styled","Author","Reviews","movieId","useOutletContext","useState","reviews","setReviews","useEffect","getMovieReviewsById","then","catch","err","console","log","length","map","author","content","BASE_URL","API_KEY","IMG_PLACEHOLDER","getTrending","url","axios","response","data","searchMovie","query","result","results","getMovieById","id","fixMovie","genres","genre","name","getMovieCreditsById","cast","fixCast","movie","Object","assign","poster_path","release_year","release_date","slice","vote_average","original_name","profile_path","newActor","character","path"],"sourceRoot":""}