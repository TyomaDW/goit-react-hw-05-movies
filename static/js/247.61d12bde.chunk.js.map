{"version":3,"file":"static/js/247.61d12bde.chunk.js","mappings":"gQAMMA,EAAYC,EAAAA,GAAAA,KAAH,sEAKTC,EAAOD,EAAAA,GAAAA,EAAH,wFAMK,SAASE,IACtB,IAAMC,GAAUC,EAAAA,EAAAA,MAChB,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAUA,OATAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBN,GACjBO,MAAK,SAAAJ,GACJC,EAAQD,MAETK,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,CAACT,KAEF,iCACO,OAAJG,QAAI,IAAJA,OAAA,EAAAA,EAAMS,QAAS,IACd,wBACGT,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,KAApB,OACR,2BACE,gBAAKC,OAAQ,IAAKC,IAAKF,EAAMG,IAAI,YACjC,SAACrB,EAAD,UAAOgB,KACP,0BACE,SAAClB,EAAD,yBACCmB,OALID,SAWbX,GAA0B,KAAb,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMS,UAAgB,gD,0MC3CjCQ,EAAW,+BACXC,EAAU,mCAEVC,EAAkB,uDAEXC,EAAW,mCAAG,6FACnBC,EADmB,UACVJ,EADU,uCAC6BC,GAD7B,SAEFI,IAAAA,IAAUD,GAFR,cAEnBE,EAFmB,yBAGlBA,EAASC,MAHS,2CAAH,qDAMXC,EAAW,mCAAG,WAAMC,GAAN,gFACnBL,EADmB,UACVJ,EADU,iCACuBC,EADvB,kBACwCQ,EADxC,wCAEJJ,IAAAA,IAAUD,GAFN,cAEnBM,EAFmB,yBAGlBA,EAAOH,KAAKI,SAHM,2CAAH,sDAMXC,EAAY,mCAAG,WAAMC,GAAN,oFACpBT,EADoB,UACXJ,EADW,kBACOa,EADP,oBACqBZ,GADrB,SAEHI,IAAAA,IAAUD,GAFP,uBAElBG,EAFkB,EAElBA,MACFG,EAASI,EAASP,IACjBQ,OAASL,EAAOK,OAAOtB,KAAI,SAAAuB,GAAK,OAAIA,EAAMtB,QAJvB,kBAKnBgB,GALmB,2CAAH,sDAQZxB,EAAmB,mCAAG,WAAM2B,GAAN,kFAC3BT,EAD2B,UAClBJ,EADkB,kBACAa,EADA,4BACsBZ,GADtB,SAIvBI,IAAAA,IAAUD,GAJa,uBAGvBrB,EAHuB,EAG/BwB,KAAQxB,KAHuB,kBAK1BA,EAAKU,IAAIwB,IALiB,2CAAH,sDAQnBC,EAAmB,mCAAG,WAAML,GAAN,oFAC3BT,EAD2B,UAClBJ,EADkB,kBACAa,EADA,4BACsBZ,GADtB,SAIvBI,IAAAA,IAAUD,GAJa,uBAGvBO,EAHuB,EAG/BJ,KAAQI,QAEJQ,EAAUR,EAAQlB,KAAI,YAC1B,MAAO,CAAE2B,OAD0C,EAAtBA,OACZC,QADkC,EAAdA,YALN,kBAQ1BF,GAR0B,2CAAH,sDAW1BL,EAAW,SAAAQ,GACf,IAAIZ,EAASa,OAAOC,OAAO,GAAIF,GAQ/B,OAPIZ,EAAOe,YACTf,EAAOe,YAAc,kCAAoCf,EAAOe,YAC7Df,EAAOe,YAAcvB,EAC1BQ,EAAOgB,aAAgBhB,EAAOiB,aAE1BjB,EAAOiB,aAAaC,MAAM,EAAG,GAD7B,UAEJlB,EAAOmB,aAAP,UAA+C,GAAtBnB,EAAOmB,aAAhC,KACOnB,GAGHO,EAAU,SAAC,GAAgD,IAA9Ca,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,aAC1BC,EAAW,CAAEtC,KAAMoC,EAAenC,UADsB,EAAhBA,WAK9C,OAHAqC,EAASpC,KAAOmC,EACZ,kCAAoCA,EACpC7B,EACG8B","sources":["components/Cast/Cast.jsx","services/apiService.js"],"sourcesContent":["import { useOutletContext } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { getMovieCreditsById } from '../../services/apiService';\n\nconst Character = styled.span`\n  font-weight: 700;\n  margin-right: 0.5rem;\n`;\n\nconst Name = styled.p`\n  font-weight: 700;\n  font-style: italic;\n  font-size: 20px;\n`;\n\nexport default function Cast() {\n  const movieId = useOutletContext();\n  const [cast, setCast] = useState(null);\n  useEffect(() => {\n    getMovieCreditsById(movieId)\n      .then(cast => {\n        setCast(cast);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, [movieId]);\n  return (\n    <>\n      {cast?.length > 0 && (\n        <ul>\n          {cast.map(({ name, character, path }) => (\n            <li key={name}>\n              <img height={200} src={path} alt=\"poster\" />\n              <Name>{name}</Name>\n              <p>\n                <Character>Character:</Character>\n                {character}\n              </p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {!cast || (cast?.length === 0 && <p>No actors found</p>)}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'aa799e6d0297de166f5b00a47e312b46';\n\nconst IMG_PLACEHOLDER = 'https://critics.io/img/movies/poster-placeholder.png';\n\nexport const getTrending = async () => {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\nexport const searchMovie = async query => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`;\n  const result = await axios.get(url);\n  return result.data.results;\n};\n\nexport const getMovieById = async id => {\n  const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  const result = fixMovie(data);\n  result.genres = result.genres.map(genre => genre.name);\n  return result;\n};\n\nexport const getMovieCreditsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const {\n    data: { cast },\n  } = await axios.get(url);\n  return cast.map(fixCast);\n};\n\nexport const getMovieReviewsById = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const {\n    data: { results },\n  } = await axios.get(url);\n  const reviews = results.map(({ author, content }) => {\n    return { author, content };\n  });\n  return reviews;\n};\n\nconst fixMovie = movie => {\n  let result = Object.assign({}, movie);\n  if (result.poster_path)\n    result.poster_path = 'https://image.tmdb.org/t/p/w500' + result.poster_path;\n  else result.poster_path = IMG_PLACEHOLDER;\n  result.release_year = !result.release_date\n    ? 'Unknown'\n    : result.release_date.slice(0, 4);\n  result.vote_average = `${result.vote_average * 10}%`;\n  return result;\n};\n\nconst fixCast = ({ original_name, profile_path, character }) => {\n  const newActor = { name: original_name, character };\n  newActor.path = profile_path\n    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n    : IMG_PLACEHOLDER;\n  return newActor;\n};\n"],"names":["Character","styled","Name","Cast","movieId","useOutletContext","useState","cast","setCast","useEffect","getMovieCreditsById","then","catch","err","console","log","length","map","name","character","path","height","src","alt","BASE_URL","API_KEY","IMG_PLACEHOLDER","getTrending","url","axios","response","data","searchMovie","query","result","results","getMovieById","id","fixMovie","genres","genre","fixCast","getMovieReviewsById","reviews","author","content","movie","Object","assign","poster_path","release_year","release_date","slice","vote_average","original_name","profile_path","newActor"],"sourceRoot":""}